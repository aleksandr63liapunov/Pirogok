package com.example.english.service;

import com.example.english.config.BotConfig;
import com.example.english.model.Cocktails;
import com.example.english.model.Ingredients;
import com.example.english.model.UserBotPiro;
import com.example.english.model.WordTranslation;
import com.example.english.repo.UserRepository;
import lombok.AllArgsConstructor;
import org.hibernate.annotations.CurrentTimestamp;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.commands.SetMyCommands;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.commands.BotCommand;
import org.telegram.telegrambots.meta.api.objects.commands.scope.BotCommandScopeDefault;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;


@Component

public class TelegrammBot extends TelegramLongPollingBot {
    private final BotConfig botConfig;
    private final TranslationService translationService;
    private final UserRepository userRepository;
    private final ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);
    private final Map<Long, Boolean> userTestStatusMap = new ConcurrentHashMap<>();
    private final CocktailsService cocktailsService;
    private final IngredientsService ingredientsService;

    // –•—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    private final Map<Long, String> userLanguageMap = new ConcurrentHashMap<>();

    public TelegrammBot(BotConfig botConfig, IngredientsService ingredientsService, TranslationService translationService, CocktailsService cocktailsService, UserRepository userRepository) {
        this.userRepository = userRepository;
        this.ingredientsService = ingredientsService;
        this.botConfig = botConfig;
        this.translationService = translationService;
        this.cocktailsService = cocktailsService;
        List<BotCommand> listOfCommand = new ArrayList<>();
        listOfCommand.add(new BotCommand("/start", "Welcome message"));
        listOfCommand.add(new BotCommand("/test", "Get a random word and translation"));
        listOfCommand.add(new BotCommand("/change_language", "Switch language"));
        listOfCommand.add(new BotCommand("/cocktails", "Get list of cocktails")); // –ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
        listOfCommand.add(new BotCommand("/ingredient", "Get ingredient"));

        try {
            execute(new SetMyCommands(listOfCommand, new BotCommandScopeDefault(), null));
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            String messageText = update.getMessage().getText();
            long chatId = update.getMessage().getChatId();

            switch (messageText) {
                case "/start" -> startCommandReceived(chatId, update.getMessage().getChat().getUserName());
                case "/test" -> handleTest(chatId);
                case "/change_language" -> showLanguageOptions(chatId);
                case "/pause_resume" -> toggleTestStatus(chatId);
                case "English" -> setLanguage(chatId, "en");
                case "Russian" -> setLanguage(chatId, "ru");
                case "‚¨ÖÔ∏è –ù–∞–∑–∞–¥" -> sendMessage(chatId, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.");
                case "/cocktails" -> handleCocktails(chatId); // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã
                case "Calculate Ingredients" -> requestPersonCount(chatId); // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ª—é–¥–µ–π
                default -> {
                    if (isNumeric(messageText)) { // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª —á–∏—Å–ª–æ
                        handleIngredientsCalculation(chatId, Integer.parseInt(messageText));
                    } else {
                        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–∫—Ç–µ–π–ª–∏ –∏ –ø–µ—Ä–µ–≤–æ–¥
                        boolean isCocktailFound = handleIngredientsIfCocktail(chatId, messageText);
                        if (!isCocktailFound) {
                            handleTranslation(chatId, messageText);
                        }
                    }
                }
            }
        }
    }

    private void requestPersonCount(long chatId) {
        sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤:");
    }

    private boolean isNumeric(String str) {
        try {
            Integer.parseInt(str);
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }

    private void handleIngredientsCalculation(long chatId, int personCount) {
        try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –∫–æ–∫—Ç–µ–π–ª—å –∫–∞–∫ –ø—Ä–∏–º–µ—Ä
            Cocktails cocktail = cocktailsService.getAll().get(0); // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤—ã–±–æ—Ä –∫–æ–∫—Ç–µ–π–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            Map<String, Double> ingredients = ingredientsService.getIngredientsForPerson(cocktail, personCount);

            StringBuilder response = new StringBuilder("–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –¥–ª—è ").append(personCount).append(" —á–µ–ª–æ–≤–µ–∫:\n");
            ingredients.forEach((ingredient, amount) ->
                    response.append("‚Ä¢ ").append(ingredient).append(": ").append(amount).append(" –ª\n")
            );

            sendMessage(chatId, response.toString());
        } catch (Exception e) {
            sendMessage(chatId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤: " + e.getMessage());
        }
    }

    private void toggleTestStatus(long chatId) {
        boolean currentStatus = userTestStatusMap.getOrDefault(chatId, false); // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        userTestStatusMap.put(chatId, !currentStatus); // –ú–µ–Ω—è–µ–º –µ–≥–æ

        String statusMessage = currentStatus
                ? "Test paused. Press /pause_resume to continue."
                : "Test resumed.";
        sendMessage(chatId, statusMessage);
    }

    //    private void handleCocktails(long chatId) {
//        List<Cocktails> cocktails = cocktailsService.getAll();
//        if (cocktails.isEmpty()) {
//            sendMessage(chatId, "No cocktails found.");
//        } else {
//            StringBuilder response = new StringBuilder("üçπ –ú–µ–Ω—é –∫–æ–∫—Ç–µ–π–ª–µ–π :\n");
//            for (Cocktails cocktail : cocktails) {
//                response.append("‚Ä¢ ").append(cocktail.getName()).append("\n");
//            }
//            response.append("\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–∫—Ç–µ–π–ª—è, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –µ–≥–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã.");
//            sendMessage(chatId, response.toString());
//        }
//    }
    private void handleCocktails(long chatId) {
        List<Cocktails> cocktails = cocktailsService.getAll();
        if (cocktails.isEmpty()) {
            sendMessage(chatId, "No cocktails found.");
            return;
        }

        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText("üçπ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–∫—Ç–µ–π–ª—å:");

        // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–æ–∫—Ç–µ–π–ª—è–º–∏
        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        keyboardMarkup.setResizeKeyboard(true); // –£–¥–æ–±–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞

        List<KeyboardRow> keyboardRows = new ArrayList<>();
        for (Cocktails cocktail : cocktails) {
            KeyboardRow row = new KeyboardRow();
            row.add(cocktail.getName()); // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–∫—Ç–µ–π–ª—è –≤ –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É
            keyboardRows.add(row);
        }
        KeyboardRow backRow = new KeyboardRow();
        backRow.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥");
        keyboardRows.add(backRow);

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboardMarkup.setKeyboard(keyboardRows);
        message.setReplyMarkup(keyboardMarkup);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private boolean handleIngredientsIfCocktail(long chatId, String cocktailName) {
        // –ù–∞–π—Ç–∏ –∫–æ–∫—Ç–µ–π–ª—å –ø–æ –∏–º–µ–Ω–∏
        List<Cocktails> cocktails = cocktailsService.getAll();
        Cocktails selectedCocktail = cocktails.stream()
                .filter(c -> c.getName().equalsIgnoreCase(cocktailName))
                .findFirst()
                .orElse(null);

        if (selectedCocktail == null) {
            return false; // –ö–æ–∫—Ç–µ–π–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
        }

        // –ù–∞–π—Ç–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –¥–ª—è –∫–æ–∫—Ç–µ–π–ª—è
        Ingredients ingredients = ingredientsService.findIngredientsByCocktails(selectedCocktail);
        if (ingredients == null) {
            sendMessage(chatId, "–î–ª—è –∫–æ–∫—Ç–µ–π–ª—è '" + cocktailName + "' –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.");
        } else {
            StringBuilder response = new StringBuilder("üçπ –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –¥–ª—è –∫–æ–∫—Ç–µ–π–ª—è '")
                    .append(cocktailName)
                    .append("':\n");

            if (ingredients.getRome() > 0)
                response.append("‚Ä¢ –†–æ–º: ").append(ingredients.getRome()).append("\n");
            if (ingredients.getAperol() > 0)
                response.append("‚Ä¢ –ê–ø–µ—Ä–æ–ª—å: ").append(ingredients.getAperol()).append("\n");
            if (ingredients.getSparkling_wine() > 0)
                response.append("‚Ä¢ –ò–≥—Ä–∏—Å—Ç–æ–µ –≤–∏–Ω–æ: ").append(ingredients.getSparkling_wine()).append("\n");
            if (ingredients.getJin() > 0)
                response.append("‚Ä¢ –î–∂–∏–Ω: ").append(ingredients.getJin()).append("\n");
            if (ingredients.getWiskey() > 0)
                response.append("‚Ä¢ –í–∏—Å–∫–∏: ").append(ingredients.getWiskey()).append("\n");
            if (ingredients.getTequila() > 0)
                response.append("‚Ä¢ –¢–µ–∫–∏–ª–∞: ").append(ingredients.getTequila()).append("\n");
            if (ingredients.getTreeple_sec() > 0)
                response.append("‚Ä¢ –ê–ø–µ–ª—å—Å–∏–Ω –ª–∏–∫: ").append(ingredients.getTreeple_sec()).append("\n");
            if (ingredients.getSparkling_water() > 0)
                response.append("‚Ä¢ –í–æ–¥–∞ –≥–∞–∑: ").append(ingredients.getSparkling_water()).append("\n");
            if (ingredients.getLimon() > 0)
                response.append("‚Ä¢ –õ–∏–º–æ–Ω: ").append(ingredients.getLimon()).append("\n");
            if (ingredients.getPineapple_Juice() > 0)
                response.append("‚Ä¢ –ê–Ω–∞–Ω —Å–æ–∫: ").append(ingredients.getPineapple_Juice()).append("\n");
            if (ingredients.getCranberry_Juice() > 0)
                response.append("‚Ä¢ K–ª—é–∫–≤ —Å–æ–∫: ").append(ingredients.getCranberry_Juice()).append("\n");
            if (ingredients.getOrange_Juice() > 0)
                response.append("‚Ä¢ –ê–ø–µ–ª—å—Å–∏–Ω —Å–æ–∫: ").append(ingredients.getOrange_Juice()).append("\n");
            if (ingredients.getTonic() > 0)
                response.append("‚Ä¢ –¢–æ–Ω–∏–∫: ").append(ingredients.getTonic()).append("\n");
            // –î–æ–±–∞–≤—å—Ç–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏

            sendMessage(chatId, response.toString());
        }
        return true; // –ö–æ–∫—Ç–µ–π–ª—å –Ω–∞–π–¥–µ–Ω –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
    }


    private void startCommandReceived(long chatId, String name) {
        String answer = "–ó–¥–∞—Ä–æ–≤, " + name + "! Send '/test' to get a random word or '/change_language' to switch language.";
        sendMessage(chatId, answer);
        userLanguageMap.put(chatId, "en"); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —è–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }

    private void handleTest(long chatId) {
        List<WordTranslation> words = new ArrayList<>(translationService.getAllWordsRandom());
        if (words.isEmpty()) {
            sendMessage(chatId, "No words found in the database.");
            return;
        }

        userTestStatusMap.put(chatId, true); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äî –∞–∫—Ç–∏–≤–µ–Ω

        scheduler.scheduleAtFixedRate(new Runnable() {
            private int index = 0;

            @Override
            public void run() {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ —Ç–µ—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if (!userTestStatusMap.getOrDefault(chatId, false)) {
                    return; // –ï—Å–ª–∏ —Ç–µ—Å—Ç –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
                }

                if (index < words.size()) {
                    WordTranslation wordTranslation = words.get(index);
                    String word = wordTranslation.getWord();
                    String translation = wordTranslation.getTranslation();

                    sendMessage(chatId, "Word: " + word);
                    scheduler.schedule(() -> sendMessage(chatId, "Translation: " + translation), 3, TimeUnit.SECONDS);

                    index++;
                } else {
                    sendMessage(chatId, "End of words! You've gone through all the words.");
                    scheduler.shutdown(); // –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
                }
            }
        }, 0, 5, TimeUnit.SECONDS);
    }


    private void handleTranslation(long chatId, String word) {
        String userLanguage = userLanguageMap.getOrDefault(chatId, "en"); // –Ø–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        String fromLang = userLanguage; // –ò—Å—Ö–æ–¥–Ω—ã–π —è–∑—ã–∫
        String toLang = userLanguage.equals("en") ? "ru" : "en"; // –Ø–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞

        // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥
        String translationWithExamples = translationService.translateWord(word, fromLang, toLang);
        sendMessage(chatId, "Translation:\n" + translationWithExamples);
    }

    private void showLanguageOptions(long chatId) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText("Choose your language:");

        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        List<KeyboardRow> keyboardRows = new ArrayList<>();
        KeyboardRow row = new KeyboardRow();
        row.add("English");
        row.add("Russian");
        keyboardRows.add(row);
        keyboardMarkup.setKeyboard(keyboardRows);
        message.setReplyMarkup(keyboardMarkup);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void setLanguage(long chatId, String language) {
        userLanguageMap.put(chatId, language);
        sendMessage(chatId, "Language switched to " + (language.equals("en") ? "English" : "Russian") + ".");
    }

    private void sendMessage(long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(text);

        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        List<KeyboardRow> keyboardRows = new ArrayList<>();

        KeyboardRow row1 = new KeyboardRow();
        row1.add("/start");
        row1.add("/test");
        row1.add("/pause_resume");
        row1.add("/change_language");
        row1.add("/cocktails"); // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É Cocktails
        KeyboardRow row2 = new KeyboardRow();
        row2.add("Calculate Ingredients");

        keyboardRows.add(row1);
        keyboardRows.add(row2);

        keyboardMarkup.setKeyboard(keyboardRows);
        message.setReplyMarkup(keyboardMarkup);

        try {
            execute(message);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Override
    public String getBotUsername() {
        return botConfig.getBotName();
    }

    @Override
    public String getBotToken() {
        return botConfig.getBotToken();
    }
}
